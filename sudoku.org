#+title: A sudoku-solving program
#+property: header-args :noweb yes :exports code
#+bibliography: references.bib

#+begin_export latex
\renewcommand*{\sudokuformat}[1]{\large\sffamily#1}
\setlength\sudokusize{5cm}
\setlength\sudokuthickline{1pt}
\newfloat{listing}{thp}{loll}
\floatname{listing}{Listing}
#+end_export


* Introduction

This document describes the function of a simple backtracking algorithm for solving a [[https://en.wikipedia.org/wiki/Sudoku][sudoku]], written in C.

* The data structure

A sudoku is a \(9\times9\) grid, each cell containing either a digit from one to nine, or nothing. C does not support optional values in the same robust way as Haskell or Rust, but since the range of legal values in a sudoku is restricted, it is trivial to use a 'magic' value to represent nothing. In this program, src_c{0} represents an empty cell.

Since a sudoku is a two-dimensional structure, it might make sense to represent it in memory using a two-dimensional array, which is easily possible in C. However, in the interests of making the program run as efficiently as possible, it suffices to represent a sudoku as a one-dimensional array of length \(81\).

#+caption: The sudoku data structure
#+name: sudoku
#+begin_src c
int sudoku[81]
#+end_src

There are times when it is useful to look up an src_c{int} in the array based on the row and column of the cell it represents. The function src_c{cell_to_index} provides a simple means of converting from row and column indices (starting from zero) to an array index.

#+caption: Function to \keyword{return} an array index, based on row and column indices
#+name: cell_to_index
#+begin_src c
int cell_to_index(int row, int col) { return (row * 9 + col); }
#+end_src

* Neighbouring cells

In order to determine whether an empty cell might hold a particular value, we need a way of determining its 'neighbours', that is, the cells in the same row, column, and \(3\times3\) square. For example, in the sudoku in \cref{easy}, the first empty cell (in the first row and the third column, counting from \(1\)) cannot be \(2\), \(5\), \(3\), \(9\), or \(1\), as these values are already present in the first row; it cannot be \(7\), as this is in the same column; and it cannot be \(2\) or \(4\), as these are present in the same square. By this reasoning, we know that it can only be \(6\) or \(8\).

\begin{figure}[H]
  \begin{sudoku}
    |2|5| | |3| |9| |1|.
    | |1| | | |4| | | |.
    |4| |7| | | |2| |8|.
    | | |5|2| | | | | |.
    | | | | |9|8|1| | |.
    | |4| | | |3| | | |.
    | | | |3|6| | |7|2|.
    | |7| | | | | | |3|.
    |9| |3| | | |6| |4|.
  \end{sudoku}
  \caption{An easy sudoku.\label{easy}}
\end{figure}

The function src_c{neighbours} takes an array index src_c{i} (from src_c{0} to src_c{80}) and writes the indices of every neighbouring cell into the array src_c{ns}. src_c{i} itself appears in src_c{ns} three times; this is of no consequence.

#+caption: Function to copy neighbouring indices of \identifier{i} into \identifier{ns}
#+name: neighbours
#+begin_src c
void neighbours(int i, int ns[27]) {
    <<initialize variables>>
    <<copy indices>>
}
#+end_src

#+begin_export latex
\begin{figure}[H]
  \centering
  \begin{BVerbatim}
#+end_export
#+begin_src python :exports results :results raw
output = ""

for i in range(81):
    output += f"{i: 3d}"
    if (i % 9) == 8:
        output += "\n"

return output
#+end_src

#+RESULTS:
  0  1  2  3  4  5  6  7  8
  9 10 11 12 13 14 15 16 17
 18 19 20 21 22 23 24 25 26
 27 28 29 30 31 32 33 34 35
 36 37 38 39 40 41 42 43 44
 45 46 47 48 49 50 51 52 53
 54 55 56 57 58 59 60 61 62
 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80
 #+begin_export latex
 \end{BVerbatim}
 \caption{The indices of the sudoku array, laid out in a \(9\times9\) grid.\label{indices}}
 \end{figure}
 #+end_export

The row and column matching up to the index src_c{i} are determined by integer division and the modulo function, respectively: an index's row corresponds to how many multiples of \(9\) it is away from zero, while its column corresponds to how far it is from the last multiple of \(9\). Compare index src_c{42} in \cref{indices}. \(\lfloor42/9\rfloor = 4\), which means that \(42\) is in the fourth row (counting from zero); \(42\text{ modulo }9 = 6\), so it is in the sixth column.

#+caption: Initialize variables
#+name: initialize variables
#+begin_src c
int row = i / 9;
int col = i % 9;
int t = 0;
int c = 0;
#+end_src

To find the index that begins row \(x\), we multiply \(x\) by \(9\).

#+caption: Copy neighbours' indices into \identifier{ns}
#+begin_src c :noweb-ref copy indices
c = row * 9;
while (t < 9) {
    ns[t++] = c;
    c += 1;
}
c = col;
while (t < 18) {
    ns[t++] = c;
    c += 9;
}
#+end_src

Finding the indices in the same \(3\times3\) square as a given index is slightly more complicated. We find the index of the square's top-left cell by performing integer division by \(3\) on the row and column numbers and multiplying them by \(3\) again.

#+begin_src c :noweb-ref copy indices
int rstart = (row / 3) * 3;
int cstart = (col / 3) * 3;
for (int j = rstart; j < rstart + 3; j++) {
    for (int k = cstart; k < cstart + 3; k++) {
        ns[t++] = cell_to_index(j, k);
    }
}
#+end_src

Now that we can find the neighbours of an index, it becomes simple to check whether a value can be legally placed in a particular position.

#+caption: Function to check whether \identifier{a} is allowed in index \identifier{c}
#+name: valid_attempt
#+begin_src c
int valid_attempt(<<sudoku>>,
                  int a, int c) {
    int ns[27];
    neighbours(c, ns);
    for (int i = 0; i < 27; i++) {
        if (sudoku[ns[i]] == a) {
            return 0;
        }
    }
    return 1;
}
#+end_src

* The solving algorithm

The above preliminaries are all we need to get into the meat of the algorithm.

#+caption: Solving function
#+name: solve
#+begin_src c
void solve(<<sudoku>>, int solved[81]) {
    <<is_solved>>
    <<backtracking>>
}
#+end_src

The src_c{solve} function uses a src_c{static} variable to record whether the puzzle is solved. If the function is called after src_c{is_solved} has been set to src_c{1}, it src_c{return}s. An earlier draft of this function caused the program to exit immediately after printing the completed puzzle; this may be marginally faster, but has the downside of not being able to gracefully pass the solved sudoku to another part of the program.

#+caption: Check whether the puzzle is solved
#+name: is_solved
#+begin_src c
static int is_solved = 0;
if (is_solved) {
    return;
}
int c = first_empty(sudoku);
if (c == -1) {
    is_solved = 1;
    copy_array(sudoku, solved, 81);
}
#+end_src

The src_c{first_empty} function uses the 'magic' value src_c{-1} to indicate that every cell in the sudoku contains a value.

#+caption: Function to \keyword{return} the index of the first empty cell of a sudoku
#+name: first_empty
#+begin_src c
int first_empty(<<sudoku>>) {
    for (int i = 0; i < 81; i++) {
        if (sudoku[i] == 0) {
            return i;
        }
    }
    return -1;
}
#+end_src

#+caption: Function to copy items of one array into another
#+name: copy_array
#+begin_src c
void copy_array(int *a, int *b, int n) {
    for (int i = 0; i < n; i++) {
        b[i] = a[i];
    }
}
#+end_src

This is the real heart of it. I was inspired to try this solution by a Computerphile video I had watched some months previously, although all the code is my own [cite:@Computerphile2020]. The algorithm solves the puzzle in an inhuman way: upon finding the first empty cell, it checks which values are valid and tries each of them in turn, passing the ever-more-complete sudoku to itself again to continue the solving process. If there are no valid values, it loops through the digits \(1\) to \(9\) without making any changes to src_c{sudoku}, returning the control flow to the instance of src_c{solve} that called it. Once all values have been attempted, the array item in question must be set back to src_c{0}, as the sudoku exists as a shared data structure that is passed by reference and modified by each pass of src_c{solve}. The recursive calls of src_c{solve} can be thought of as forming a branching tree of puzzles of varying degrees of completeness, where the solved sudoku sits at the end of the longest branch.

Since the algorithm only inserts valid values, the absence of empty cells in a puzzle necessarily means that it is solved.

#+caption: Recursively solve the puzzle
#+name: backtracking
#+begin_src c
for (int i = 1; i <= 9; i++) {
    if (valid_attempt(sudoku, i, c)) {
        sudoku[c] = i;
        solve(sudoku, solved);
        sudoku[c] = 0;
    }
}
#+end_src

#+caption: The solving functions
#+name: solving functions
#+begin_src c
<<cell_to_index>>
<<neighbours>>
<<valid_attempt>>
<<first_empty>>
<<copy_array>>
<<solve>>
#+end_src

* Reducing solve time

The algorithm solves the puzzle starting from the top left-hand corner and ignores cells that are already filled in. Thanks to the recursive nature of the solving algorithm, a sudoku with many empty cells in the first row can take considerably longer to solve than one with empty cells concentrated towards the final rows. This means that the four orientations of a given puzzle may require varying amounts of time to solve.

** Assessing solve time

In order to use this information to our advantage, we need some way of assessing whether one puzzle will take more or less time to solve than another. Of course, this can be done by simply solving both puzzles and comparing the time taken, but that is not of much use when our objective is to make the program faster and more efficient.

Since each empty cell may need to be checked (and incur the checking of all following empty cells) nine times, intuition suggests that each cell contributes nine times more to the potential solve time than the cell that comes after it. A sensible way of assessing the solve time of a puzzle might therefore be to assign each cell an integer \(9^{81-x}\), where \(x\) is the index of the cell, and compute the sum of such values corresponding to empty cells.

While this may be a valid approach, the numbers involved are too massive to be very useful: the largest difficulty rating that could be reached by this, \(\sum_{n=1}^{81}{9^n}\), is greater than \(2^{256}\), and would require specialized mathematics libraries to be represented in C.

For this reason, the program uses a rather more holistic approach. Cells are assigned a weighting based on a reverse of the Fibonacci sequence, skipping the first digit so that no two cells have the same value. This weighting means that a single empty cell immediately followed by two filled cells is equivalent to a filled cell followed directly by two empty cells, which accords with my intuition and behaves suitably in testing, even if it lacks mathematical rigour. The highest possible rating produced by this weighting (the sum of the first 82 Fibonacci numbers) can be represented in 58 binary digits, so it fits neatly in a 64-bit integer.

#+caption: Copy Fibonacci numbers into \identifier{w}
#+name: fib_weights
#+begin_src c
void fib_weights(uint64_t w[81]) {
    uint64_t a = 0;
    uint64_t b = 1;
    for (int i = 80; i >= 0; i--) {
        w[i] = a + b;
        a = b;
        b = w[i];
    }
}
#+end_src

This function is used when we initialize the weightings in the function src_c{best_rotation}.

#+caption: Initialize weightings
#+name: initialize weights
#+begin_src c
uint64_t weights[81];
fib_weights(weights);
#+end_src

On many systems, including mine, src_c{int}s in C default to 64 bits. For the sake of portability, src_c{fib_weights} copies values into an array of src_c{uint64_t}, that is, values that are specified to be unsigned 64-bit integers. To use src_c{uint64_t}, we need to include the header =inttypes.h=.

#+caption: Include header files
#+begin_src c :noweb-ref includes
#include <inttypes.h>
#+end_src

The function src_c{difficulty} returns an estimate of relative solve time for a sudoku. It does so based not specifically on the Fibonacci weightings but on any given weighting system, so that it can still be used if a new and improved series of weightings is discovered.

#+caption: Assign a difficulty rating to \identifier{sudoku}
#+name: difficulty
#+begin_src c
uint64_t difficulty(<<sudoku>>,
                    uint64_t weights[81]) {
    uint64_t diff = 0;
    for (int i = 0; i < 81; i++) {
        if (sudoku[i] == 0) {
            diff += weights[i];
        }
    }
    return diff;
}
#+end_src

#+caption: Functions to estimate relative solve time
#+name: assessment
#+begin_src c
<<fib_weights>>
<<difficulty>>
#+end_src

** Rotation

The function src_c{best_rotation} finds the most favourable orientation of a given puzzle by rotating it three times and testing which orientation yields the lowest difficulty rating, as assigned by the function src_c{difficulty}. It also copies the best orientation into src_c{rotated}.

#+caption: Return the best orientation of \identifier{sudoku}, copying it into \identifier{rotated}
#+name: best_rotation
#+begin_src c
int best_rotation(<<sudoku>>,
                  int rotated[81]) {
    <<initialize weights>>
    int best = 0;
    uint64_t best_score = difficulty(sudoku, weights);
    copy_array(sudoku, rotated, 81);
    for (int i = 1; i < 4; i++) {
        int temp[81];
        rotate_times(sudoku, i, temp);
        uint64_t diff = difficulty(temp, weights);
        if (diff < best_score) {
            best_score = diff;
            best = i;
            copy_array(temp, rotated, 81);
        }
    }
    return best;
}
#+end_src

We can use arithmetic to take the index of a cell in a sudoku and work out the index of that cell rotated by a quarter turn.

#+caption: Return the index of \identifier{cell}, rotated \(90°\) clockwise
#+name: rotate_cell
#+begin_src c
int rotate_cell(int cell) {
    int row = cell / 9;
    int col = cell % 9;
    int new_row = col;
    int new_col = 8 - row;
    return cell_to_index(new_row, new_col);
}
#+end_src

The function src_c{rotate_times} uses src_c{rotate_cell} to copy a rotated version of a puzzle into a new array.

#+caption: Copy \identifier{sudoku} into \identifier{fixed}, rotating it \identifier{times} times
#+name: rotate_times
#+begin_src c
void rotate_times(<<sudoku>>,
                  int times, int fixed[81]) {
    times = times % 4;
    for (int i = 0; i < 81; i++) {
        int cell = i;
        for (int j = times; j > 0; j--) {
            cell = rotate_cell(cell);
        }
        fixed[cell] = sudoku[i];
    }
}
#+end_src

These functions are used in src_c{main} to rotate the input sudoku to the orientation that is (reckoned to be) quickest to solve and return it to its original orientation after it has been solved.

#+caption: Rotate the puzzle to its most favourable orientation
#+name: rotation in main
#+begin_src c
int rotated[81];
int rotations = best_rotation(sudoku, rotated);
copy_array(rotated, sudoku, 81);
#+end_src

#+caption: Return the solved puzzle to its original orientation
#+name: unrotate
#+begin_src c
rotate_times(solved, 4 - rotations, sudoku);
#+end_src

#+caption: Rotation functions
#+name: rotation
#+begin_src c
<<rotate_cell>>
<<rotate_times>>
<<best_rotation>>
#+end_src

* Reading a sudoku

The program reads a sudoku from a file as in \cref{file}, in which a digit represents the contents of a cell and a space corresponds to an empty cell.

#+begin_export latex
\begin{listing}[H]
  \centering
  \begin{BVerbatim}
#+end_export
#+begin_src bash :exports results :results raw
cat evil
#+end_src

#+RESULTS:
2   85
  8  95 6
        3
7  6  4 5
     4 2
  5    3
 1 7
       4
  2  69 8
#+begin_export latex
\end{BVerbatim}
\caption{The contents of a file to be read as a sudoku.\label{file}}
\end{listing}
#+end_export

The src_c{read_sudoku} function features only minimal error handling. It will complain if passed the name of a file that does not exist, but an attempt to read a file not in the format exemplified in \cref{file} will result in errors or garbage values.

#+caption: Function to read the sudoku at \identifier{filename}
#+name: read_sudoku
#+begin_src c
void read_sudoku(<<sudoku>>,
                 char *filename) {
    FILE *fp;
    char s[100];
    int row = 0;
    fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("%s: file not found.\n", filename);
        exit(1);
    } else {
        while (fgets(s, sizeof(s), fp) != NULL && row < 9) {
            read_row(sudoku, row, s);
            row++;
        }
        fclose(fp);
    }
}
#+end_src

In order to use a file pointer and the functions src_c{fopen}, src_c{fgets}, src_c{printf}, and src_c{fclose}, we need to include the header ~stdio.h~. Likewise, the function src_c{exit} requires ~stdlib.h~.

#+begin_src c :noweb-ref includes
#include <stdio.h>
#include <stdlib.h>
#+end_src

The src_c{read_row} function is able to deal with lines that are less than nine characters long. This behaviour is useful, as many editors automatically remove whitespace at the ends of lines; the function assumes that any unspecified cells are empty. Anything beyond the ninth character is disregarded.

#+caption: Function to read one line of a file
#+name: read_row
#+begin_src c
void read_row(<<sudoku>>,
              int row, char *row_string) {
    int index = cell_to_index(row, 0);
    for (int col = 0; col < 9; col++, index++) {
        if (*row_string == '\0') {
            sudoku[index] = 0;
        } else {
            char c = *row_string++;
            if (c >= '1' && c <= '9') {
                sudoku[index] = c - '0';
            } else {
                sudoku[index] = 0;
            }
        }
    }
}
#+end_src

#+caption: The file-reading functions
#+name: reading
#+begin_src c
<<read_row>>
<<read_sudoku>>
#+end_src

* Printing a sudoku

The sudoku-printing function accepts a Boolean argument src_c{tex}. If src_c{tex} is true, it prints the puzzle in a form that is understood by the \LaTeX{} package [[https://www.ctan.org/pkg/sudoku][~sudoku~]], with cells separated by the pipe character (~|~) and rows ending with a full stop. Otherwise, it prints the sudoku with spaces separating the columns and newline characters separating the rows.

#+caption: Function to print a sudoku
#+name: print_sudoku
#+begin_src c
void print_sudoku(<<sudoku>>, int tex) {
    int c;
    for (int i = 0; i < 81; i++) {
        c = sudoku[i];
        printf("%s", tex ? "|" : "");
        if (c == 0) {
            printf(" ");
        } else {
            printf("%d", sudoku[i]);
        }
        printf("%s", tex ? "" : " ");
        if (i % 9 == 8) {
            printf("%s", tex ? "|." : "");
            printf("\n");
        }
    }
}
#+end_src

* The \identifier{main} function and the command line

If the program is executed under the name ~solve~, it solves the puzzle it is given and then prints it. If not, it simply prints the sudoku as it finds it.

#+caption: The main function
#+name: main
#+begin_src c
int main(int argc, char **argv) {
    <<initialize main variables>>
    if (strcmp(exec_name, "solve") == 0) {
        <<rotation in main>>
        solve(sudoku, solved);
        <<unrotate>>
        print_sudoku(sudoku, tex);
    } else {
        print_sudoku(sudoku, tex);
    }
}
#+end_src

Use of the string comparison function src_c{strcmp} necessitates the header ~string.h~.

#+begin_src c :noweb-ref includes
#include <string.h>
#+end_src

The program uses command-line arguments to determine the name it was executed under, the name of the file containing the sudoku it is about to read, and whether to print the puzzle in a \LaTeX{}-friendly way.

#+caption: Initialize variables
#+name: initialize main variables
#+begin_src c
<<sudoku>>;
int solved[81], tex;
char exec_name[100]; /* the name of the executable can only be 100 characters long */
name_part(argv[0], exec_name);
read_sudoku(sudoku, argv[1]);
tex = tex_print(&argv[2]);
#+end_src

In order to extract the name of a file from its path, src_c{name_part} copies src_c{filename} into src_c{result} character by character, starting again from the beginning of src_c{result} if it encounters a forward slash. This behaviour may not be POSIX compliant, and it certainly would not work on Windows. The behaviour of the program should be consistent, regardless of whether it is invoked under ~solve~ or ~./solve~, and so on.

#+caption: Function to obtain the last part of a file path
#+name: name_part
#+begin_src c
void name_part(char *filename, char *result) {
    char *rs = result;
    char *i;
    for (i = filename; *i != '\0'; i++) {
        if (*i == '/') {
            result = rs;
        } else {
            ,*result++ = *i;
        }
    }
    ,*result = '\0';
}
#+end_src

The function src_c{tex_print} is a rudimentary argument parser.

#+caption: Function to check a specific command-line argument
#+name: tex_print
#+begin_src c
int tex_print(char **args) {
    for (; *args != NULL; args++) {
        if (strcmp(*args, "-tex") == 0) {
            return 1;
        }
    }
    return 0;
}
#+end_src

#+caption: Command line functions
#+name: command line
#+begin_src c
<<name_part>>
<<tex_print>>
#+end_src

* Putting it all together

The program is small enough to exist quite happily in a single source file.

#+caption: The program structure
#+name: structure
#+begin_src c :tangle sudoku.c
<<includes>>
<<solving functions>>
<<reading>>
<<print_sudoku>>
<<command line>>
<<assessment>>
<<rotation>>
<<main>>
#+end_src

* Testing

The following commands compile the program so that it can be invoked in the same directory by the commands ~./solve~ and ~./print~.

#+begin_src bash :exports code
cc sudoku.c -o solve
cc sudoku.c -o print
#+end_src

#+RESULTS:

So far, the program has managed to solve every sudoku I throw at it, including Finnish mathematician Arto Inkala's 'AI Escargot' (shown in \cref{escargot}), which [[https://www.kristanix.com/sudokuepic/worlds-hardest-sudoku.php][he claims]] is the hardest ever. \Cref{solved} shows the solution found by the program.

#+begin_export latex
\begin{figure}%[H]
  \begin{sudoku}
#+end_export
#+begin_src bash :results latex verbatim :exports results
./print escargot -tex
#+end_src

#+RESULTS:
#+begin_export latex
|1| | | | |7| |9| |.
| |3| | |2| | | |8|.
| | |9|6| | |5| | |.
| | |5|3| | |9| | |.
| |1| | |8| | | |2|.
|6| | | | |4| | | |.
|3| | | | | | |1| |.
| |4| | | | | | |7|.
| | |7| | | |3| | |.
#+end_export
#+begin_export latex
\end{sudoku}
\caption{The puzzle 'AI Escargot'.\label{escargot}}
\end{figure}
#+end_export

#+begin_export latex
\begin{figure}%[H]
  \begin{sudoku}
#+end_export
#+begin_src bash :results latex verbatim :exports results
./solve escargot -tex
#+end_src

#+RESULTS:
#+begin_export latex
|1|6|2|8|5|7|4|9|3|.
|5|3|4|1|2|9|6|7|8|.
|7|8|9|6|4|3|5|2|1|.
|4|7|5|3|1|2|9|8|6|.
|9|1|3|5|8|6|7|4|2|.
|6|2|8|7|9|4|1|3|5|.
|3|5|6|4|7|8|2|1|9|.
|2|4|1|9|3|5|8|6|7|.
|8|9|7|2|6|1|3|5|4|.
#+end_export
#+begin_export latex
\end{sudoku}
\caption{The solved puzzle.\label{solved}}
\end{figure}
#+end_export


The program is able to arrive at a solution rapidly. Compare \cref{time}, which is the result of applying the following commands to the puzzle shown in \cref{escargot}.

#+begin_src bash :exports both :results raw
ts=$(date +%s%N)
./solve escargot
# divide by \(10^6\) to convert from nano- (\%N) to milliseconds
tt=$((($(date +%s%N) - $ts)/1000000))
echo "Time taken: $tt milliseconds."
#+end_src

#+begin_export latex
\begin{listing}
  \centering
  \begin{BVerbatim}
#+end_export
#+RESULTS:
1 6 2 8 5 7 4 9 3
5 3 4 1 2 9 6 7 8
7 8 9 6 4 3 5 2 1
4 7 5 3 1 2 9 8 6
9 1 3 5 8 6 7 4 2
6 2 8 7 9 4 1 3 5
3 5 6 4 7 8 2 1 9
2 4 1 9 3 5 8 6 7
8 9 7 2 6 1 3 5 4
Time taken: 17 milliseconds.
#+begin_export latex
\end{BVerbatim}
\caption{The time taken by the program.\label{time}}
\end{listing}
#+end_export
